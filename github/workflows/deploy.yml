name: CI/CD Pipeline Simulation (No Docker Hub)

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  LOCAL_IMAGE_TAG: os_project_sim:latest

jobs:
  build-and-test-simulate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository üõí
      uses: actions/checkout@v4

    - name: Set up Python üêç
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Install Dependencies for Tests
      run: |
        python -m pip install --upgrade pip
        pip install pandas, numpy, seaborn, matplotlib 
        
    - name: Run Unit Tests üß™
      run: |
        echo "Starting tests..."
        # Replace the line below with your actual test command (e.g., python -m unittest test_app.py)
        echo "Unit tests passed successfully (Simulated/Actual)."
        

    - name: Build Docker Image üê≥
      run: docker build -t ${{ env.LOCAL_IMAGE_TAG }} .
      

    - name: Simulate Deployment Acknowledgment & Evidence üìú
      run: |
        echo "======================================================"
        echo "‚úÖ SUCCESS: Image Built and Artifact Ready"
        echo "======================================================"
        echo "The CI pipeline successfully built the deployable artifact (Docker Image)."
        echo "In a real CI/CD pipeline, this is the point of handoff to the CD tool."
        echo ""
        echo "Artifact Details:"
        echo "  Image Name: ${{ env.LOCAL_IMAGE_TAG }}"
        echo "  Image ID: $(docker images -q ${{ env.LOCAL_IMAGE_TAG }})"
        echo ""
        echo "Simulated Deployment Instruction (For Deliverable):"
        echo "To confirm the successful build and provide **evidence of simulated deployment**,"
        echo "a CD script would execute the following commands on the local/simulated environment:"
        echo "docker run --rm ${{ env.LOCAL_IMAGE_TAG }}"
        echo "======================================================"
